<template>
  <div id="app" align="center">
    <v-app id="inspire"><br><br>
      <form @submit="onSubmit">
      <h1>로그인</h1><br>
        <v-col
          cols="10"
          md="4">
          <v-text-field
            v-model="userid"
            label="ID"
            required>
          </v-text-field><br>

          <v-text-field
            input type="password"
            v-model="password"
            label="Password"
            required>
          </v-text-field><br>
        </v-col>
        <v-btn class="mr-4" @click="onSubmit">Login</v-btn>
        <v-btn :to="{ name: 'CrawlCategory' }">Back</v-btn>
      </form>
    </v-app>
  </div>
</template>

<script>
// import LoginForm from '@/components/LoginForm.vue'
import { mapActions } from 'vuex'

export default {
  name: 'VueLogin',
  data () {
    return {
      userid: '',
      password: ''
    }
  },
  components: {
    // LoginForm
  },
  methods: {
    submit () {
      console.log('LoginForm submit()')
      const { userid, password } = this
      this.$emit('submit', { userid, password })
    },
    onSubmit (payload) {
      console.log('loginPage onSubmit()')
      this.login(payload).then(res => {
        alert('Login Success')
        this.$router.push({ name: 'CrawlCategory' })
      }).catch(err => {
        // alert(err.response.data.message)
        alert('Something Fail: ', err)
      })
    },
    ...mapActions(['login'])
  }
}
</script>


/////

<template>
  <div id="app" align="center">
    <v-app id="inspire"><br><br>
      <h1>회원가입</h1><br>
      <form submit="onSubmit">
        <v-col
          cols="10"
          md="4">
          <v-text-field
            input type="text"
            v-model="userId"
            label="ID"
            required>
          </v-text-field><br>

          <v-text-field
            input type="password"
            v-model="userPw"
            label="Password"
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="userName"
            label="Name"
            required>
          </v-text-field><br>

        </v-col>
        <v-btn class="mr-4" type="submit">join</v-btn>
        <v-btn :to="{ name: 'CrawlCategory' }">Back</v-btn>
      </form>
    </v-app>
  </div>
</template>

<script>
import axios from 'axios'
// import AdminSetupForm from '@/components/AdminSetupForm.vue'

export default {
  name: 'VueRegister',
  data () {
    return {
      userId: '',
      userName: '',
      userPw: ''
    }
  },
  components: {
    // AdminSetupForm
  },
  methods: {
    submit () {
      console.log('this: ' + this.userId +
                  ', ' + this.userName +
                  ', ' + this.userPw)
      const { userId, userName, userPw } = this
      this.$emit('submit', { userId, userName, userPw })
    },

    onSubmit (payload) {
      console.log('payload: ' + payload.userId +
                  ', ' + payload.userName +
                  ', ' + payload.userPw)
      const { userId, userName, userPw } = payload
      axios.post('http://localhost:7777/users/setup',
        { userId, userName, userPw })
        .then(res => {
          alert('Register Success')
          this.$router.push({
            name: 'Home'
          })
        })
        .catch(err => {
          alert(err.response.data)
        })
    }
  }
}
////////////////ReadForm////////////////////////////
<template>
  <div id="app" align="center">
    <v-app id="inspire"><br>
      <h1>게시글 확인</h1><br>
      <form @submit.prevent="onSubmit">
        <v-col
          cols="10"
          md="4">
          <v-text-field
            input type="text"
            v-model="board.boardNo"
            label="No"
            readonly
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.regDate"
            label="Date"
            readonly
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.title"
            label="Title"
            readonly
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.writer"
            label="Writer"
            readonly
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.content"
            label="Content"
            readonly
            required>
          </v-text-field>
        </v-col>
      </form>
    </v-app>
  </div>
</template>

<script>
export default {
  name: 'VueListReadForm',
  props: {
    board: {
      type: Object,
      required: true
    }
  }
}
</script>



////////////////readPage////////////////////////////

<template>
  <div align="center" >
    <v-app id="inspire"><br>
      <form>
        <vue-list-read-form v-if="board" :board="board" @submit="onSubmit" @click="onDelete"/>
        <p v-else>Loading ...</p>
        <v-btn class="mr-4" type="submit" :to="{ name: 'VueModifyPage', params: { boardNo } }">수정</v-btn>
        <v-btn class="mr-4" @click="onDelete">삭제</v-btn>
        <v-btn :to="{ name: 'VueListPage' }">Back</v-btn>
      </form>
    </v-app>
  </div>
</template>

<script>
import VueListReadForm from '@/components/VueListReadForm'
import { mapState, mapActions } from 'vuex'
import axios from 'axios'

export default {
  name: 'VueReadPage',
  props: {
    boardNo: {
      type: String,
      required: true
    }
  },
  computed: {
    ...mapState([
      'board'
    ])
  },
  mounted () {
    console.log('VueReadPage created(): ' + this.boardNo)
    this.fetchBoard(this.boardNo)
      .catch(err => {
        alert(err.response.data.message)
        this.$router.push()
      })
  },
  methods: {
    ...mapActions([
      'fetchBoard'
    ]),
    onDelete () {
      const { boardNo } = this.board
      axios.delete(`http://localhost:7777/boards/${boardNo}`)
        .then(res => {
          alert('Delete Success')
          this.$router.push({ name: 'VueListPage' })
        })
        .catch(err => {
          alert(err.response.data.message)
        })
    }
  },
  components: {
    VueListReadForm
  }
}
</script>

///////////////////ModifyForm////////////////////
<template>
  <div id="app" align="center" >
    <v-app id="inspire"><br><br>
      <form @submit.prevent="onSubmit">
      <h1>게시글 수정</h1><br>
        <v-col
          cols="10"
          md="4">
          <v-text-field
            input type="text"
            v-model="board.boardNo"
            label="No"
            disabled
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.regDate"
            label="Date"
            disabled
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.title"
            label="Title"
            required>
          </v-text-field><br>

          <v-text-field
            input type="text"
            v-model="board.writer"
            label="Writer"
            disabled
            required>
          </v-text-field><br>

          <v-text-field
            textarea
            v-model="board.content"
            label="Content"
            rows="5"
            required>
          </v-text-field><br>

        </v-col>
        <v-btn class="mr-4" type="submit">수정</v-btn>
        <v-btn :to="{ name: 'VueReadPage', params: { boardNo: board.boardNo.toString() } }">취소</v-btn>

      </form>
    </v-app>
  </div>
</template>

<script>
export default {
  name: 'VueListModifyForm',
  props: {
    board: {
      type: Object,
      required: true
    }
  },
  data () {
    return {
      title: '',
      content: ''
    }
  },
  methods: {
    onSubmit () {
      const { title, content } = this
      this.$emit('submit', { title, content })
    }
  },
  created () {
    this.title = this.board.title
    this.content = this.board.content
  }
}
</script>

///////////////////ModifyPage/////////////////

<template>
  <div align="center">
    <vue-list-modify-form v-if="board" :board="board" @submit="onSubmit"/>
    <p v-else>Loading ...</p>
  </div>
</template>

<script>
import VueListModifyForm from '@/components/VueListModifyForm'
import { mapState, mapActions } from 'vuex'
import axios from 'axios'

export default {
  name: 'VueModifyPage',
  components: {
    VueListModifyForm
  },
  props: {
    boardNo: {
      type: String,
      required: true
    }
  },
  computed: {
    ...mapState(['board'])
  },
  created () {
    console.log('VueModifyPage created()')
    this.fetchBoard(this.boardNo)
      .catch(err => {
        alert(err.response.data.message)
        this.$router.back()
      })
  },
  methods: {
    onSubmit (payload) {
      const { title, content } = payload
      console.log('VueModifyPage payload: ' + payload)
      axios.put(`http://localhost:7777/boards/${this.boardNo}`, { title, content })
        .then(res => {
          alert('Modify Success')
          console.log('res: ' + res.data)
          this.$router.push({
            name: 'VueReadPage',
            params: { boardNo: res.data.boardNo.toString() }
          })
        })
        .catch(err => {
          alert(err.response.data.message)
        })
    },
    ...mapActions([
      'fetchBoard'
    ])
  }
}
</script>
///////////////////////////////////////////////////////
        <v-list dense color="yellow lighten-5">
          <v-list-item @click.stop="left = !left">
            <v-list-item-action>
              <v-icon x-large color="yellow">mdi-star</v-icon>
            </v-list-item-action>
            <v-list-item-content>
              <v-list-item-title @click="suggest">추천 뉴스 보기</v-list-item-title>
            </v-list-item-content>
          </v-list-item>
        </v-list>

        <v-list dense color="pink lighten-5">
          <v-list-item @click.stop="left = !left">
            <v-list-item-action>
              <v-icon x-large color="pink">mdi-heart</v-icon>
            </v-list-item-action>
            <v-list-item-content>
              <v-list-item-title @click="savednews()">저장된 뉴스 보기</v-list-item-title>
            </v-list-item-content>
          </v-list-item>
        </v-list>

/////////////////search////////////////////////////
          <v-text-field
            hide-details
            single-line
          ></v-text-field>

            <input
            style="font-size:20pt; color:black; font-weight-bold; border: red 1px solid; background-color: white;"
            class="stage-search"
            type="text"
            v-model="search"
            placeholder="검색"
            @input="search"
            @keydown.enter="KeydownEnter" />

          handleSearchInput (e) {
            this.search = e.target.value

            if (this.search.length !== 0) {
              clearTimeout(this.debounce)
              this.debounce = setTimeout(() => {
                const filteredList = this.stageInfoList.filter(item => item.title.includes(this.search))
                this.searchList = filteredList
              }, 500)
            } else {
              clearTimeout(this.debounce)
              this.debounce = setTimeout(() => {
                this.searchList = []
              }, 500)
            }
          },

/////////////////////////////////////////////

,
    search (e) {
      this.search = e.target.value

      if (this.search.length !== 0) {
        clearTimeout(this.debounce)
        this.debounce = setTimeout(() => {
          const filteredList = this.stageInfoList.filter(page => page.title.includes(this.search))
          this.searchList = filteredList
        }, 500)
      } else {
        clearTimeout(this.debounce)
        this.debounce = setTimeout(() => {
          this.searchList = []
        }, 500)
      }
    }
//////////////////////////////
              <tr v-for="page in paginatedData" :key="page.boardNo">
                <td>{{ page.boardNo }}</td>
                <td>
                  <router-link :to="{ name: 'VueReadPage' }">
                  {{ page.title }}
                  </router-link>
                </td>
                <td>{{ page.writer }}</td>
                <td>{{ page.regDate }}</td>
              </tr>
///////////////////////////////////////////////////////////////////////////////////////
// ReadPage
<template>
  <div align="center" >
    <v-app id="inspire"><br>
      <form>
        <vue-list-read-form v-if="board" :board="board" @submit="onSubmit"/>
        <p v-else>Loading ...</p>
        <v-btn class="mr-4" type="submit" :to="{ name: 'VueModifyPage', params: { boardNo } }">수정</v-btn>
        <v-btn class="mr-4" @click="onDelete">삭제</v-btn>
        <v-btn :to="{ name: 'VueGall' }">Back</v-btn>
      </form>
    </v-app>
  </div>
</template>

<script>
import VueListReadForm from '@/components/VueListReadForm'
import { mapState, mapActions } from 'vuex'
import axios from 'axios'

export default {
  name: 'VueReadPage',
  props: {
    boardNo: {
      type: String,
      required: true
    }
  },
  components: {
    VueListReadForm
  },
  computed: {
    ...mapState([
      'board'
    ])
  },
  mounted () {
    console.log('VueReadPage created(): ' + this.boardNo)
    this.fetchBoard(this.boardNo)
      .catch(err => {
        alert(err.response.data.message)
        this.$router.push()
      })
  },
  methods: {
    ...mapActions([
      'fetchBoard'
    ]),
    onDelete () {
      const { boardNo } = this.board
      axios.delete(`http://localhost:7777/boards/${boardNo}`)
        .then(res => {
          alert('Delete Success')
          this.$router.push({ name: 'VueGall' })
        })
        .catch(err => {
          alert(err.response.data.message)
        })
    }
  }
}
</script>

//////////////////////////

<template>
  <div align="center">
    <admin-register-form @submit="onSubmit" @click="onClick"/>
  </div>
</template>

<script>
import axios from 'axios'
import { mapActions } from 'vuex'
import AdminRegisterForm from '@/components/AdminRegisterForm.vue'

export default {
  name: 'VueRegister',
  components: {
    AdminRegisterForm
  },
  methods: {
    onSubmit (payload) {
      console.log('payload: ' + payload.userId +
                  ', ' + payload.userName +
                  ', ' + payload.userPw)
      const { userId, userName, userPw } = payload
      axios.post('http://localhost:7777/users/setup',
        { userId, userName, userPw })
        .then(res => {
          alert('회원가입 완료')
          this.$router.push({
            name: 'SportsBoard'
          })
        })
        .catch(err => {
          alert(err.response.data)
        })
    },
    onClick (payload) {
      console.log('VueRegister onClick()')
      this.checkId(payload).then(res => {
        alert('사용 불가')
        this.$router.push({ name: 'SportsBoard' })
      }).catch(error => { /* eslint handle-callback-err: "warn" */
        alert('사용 가능')
      })
    },
    ...mapActions(['checkId'])
  }
}
</script>
